/**
 * University of Illinois/NCSA
 * Open Source License
 *
 * Copyright (c) 2008, Board of Trustees-University of Illinois.
 * All rights reserved.
 *
 * Developed by:
 *
 * Automated Learning Group
 * National Center for Supercomputing Applications
 * http://www.seasr.org
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal with the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimers.
 *
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimers in the
 *    documentation and/or other materials provided with the distribution.
 *
 *  * Neither the names of Automated Learning Group, The National Center for
 *    Supercomputing Applications, or University of Illinois, nor the names of
 *    its contributors may be used to endorse or promote products derived from
 *    this Software without specific prior written permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * WITH THE SOFTWARE.
 */

package org.meandre.components.viz.temporal;

import java.net.URL;
import java.util.StringTokenizer;
import java.util.concurrent.Semaphore;

import java.util.regex.Pattern;
import java.util.regex.Matcher;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.SimpleHttpConnectionManager;
import org.apache.commons.httpclient.methods.ByteArrayRequestEntity;
import org.apache.commons.httpclient.methods.PutMethod;

import org.meandre.annotations.Component;
import org.meandre.annotations.ComponentInput;
import org.meandre.annotations.ComponentProperty;
import org.meandre.annotations.Component.Mode;

import org.meandre.components.abstracts.AbstractExecutableComponent;
import org.meandre.core.ComponentContext;
import org.meandre.core.ComponentContextException;
import org.meandre.core.ComponentContextProperties;
import org.meandre.core.ComponentExecutionException;

import org.meandre.webui.WebUIException;
import org.meandre.webui.WebUIFragmentCallback;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@Component(creator="Lily Dong",
           description="Visualizes temporal data from an XML document.",
           name="SimileTimelineViewer",
           tags="simile, timeline",
           mode=Mode.webui,
           baseURL="meandre://seasr.org/components/")

public class SimileTimelineViewer extends AbstractExecutableComponent
implements WebUIFragmentCallback {
	@ComponentProperty(defaultValue="http://norma.ncsa.uiuc.edu/public-dav/applets/myfile.html",
            		   description="This property sets URL for storing html generated by this component. " +
            		   "It must be in the same directory with xml file.",
            		   name="html_URL")
    final static String DATA_PROPERTY_1 = "html_URL";
	@ComponentProperty(defaultValue="http://norma.ncsa.uiuc.edu/public-dav/applets/myxml.xml",
    		       	   description="This property sets URL for storing xml generated by this component. " +
    		       	   "It must be in the same directory with html file.",
    		       	   name="xml_URL")
    final static String DATA_PROPERTY_2 = "xml_URL";

	@ComponentInput(description="Read XML document." +
	            "<br>TYPE: org.w3c.dom.Document",
      			    name= "Document")
    public final static String DATA_INPUT = "Document";

	/** The blocking semaphore */
    private Semaphore sem = new Semaphore(1,true);

    /** The instance ID */
    private String sInstanceID = null;

    /** Store doc title */
    private String docTitle;

    /** Store URLs */
    private String htmLocation, xmLocation;

    /** Store XML for date */
    StringBuffer buf;

    /** Store the minimum year */
    int minYear;

    /** This method gets call when a request with no parameters is made to a
     * component webui fragment.
     *
     * @param response The response object
     * @throws WebUIException Some problem raised during execution and something went wrong
     */
    public void emptyRequest(HttpServletResponse response) throws
            WebUIException {
        try {
            response.getWriter().println(getViz());
        } catch (Exception e) {
            throw new WebUIException(e);
        }
    }

    /** A simple message.
    *
    * @return The html containing the page
    */
    private String getViz() {
    	StringBuffer sb = new StringBuffer();

    	sb.append("<html>\n");

    	sb.append("<title>\n");
    	sb.append(docTitle);
    	sb.append("</title>\n");

    	sb.append("<body>\n");

    	sb.append("<iframe src=\"").append(htmLocation).append("\" width=\"100%\" height=\"30%\" FRAMEBORDER=0>\n");
    	sb.append("</iframe>\n");

    	sb.append("<div align=\"center\">\n");
        sb.append("<table align=center><font size=2><a id=\"url\" href=\"/" +
        		sInstanceID + "?done=true\">DONE</a></font></table>\n");
        sb.append("</div>\n");

    	sb.append("</body>\n");
    	sb.append("</html>\n");

    	return sb.toString();
    }

    /**
     * Upload html and data(xml) to URLs.
     */
    private void upload() {
        StringBuffer sb = new StringBuffer();

        sb.append("<html>\n");
        sb.append("<head>\n");

        sb.append("<script src=\"http://simile.mit.edu/timeline/api/timeline-api.js\" type=\"text/javascript\"></script>\n");

      	sb.append("<script type=\"text/javascript\">\n");

      	sb.append("function toggleVisibility(me){\n");
     	sb.append("var child = me.childNodes.item(1);\n");
     	sb.append("if (child.style.display=='none'){\n");
     	sb.append("child.style.display='';\n");
     	sb.append("}\n");
     	sb.append("else {\n");
     	sb.append("child.style.display='none';\n");
     	sb.append("}\n");
     	sb.append("}\n");

      	sb.append("var tl;\n");
        sb.append("function onLoad() {\n");
        sb.append("var eventSource = new Timeline.DefaultEventSource();\n");

        sb.append("var bandInfos = [\n");
        sb.append("Timeline.createBandInfo({\n");
        sb.append("eventSource:    eventSource,\n");
              sb.append("date:           \"Jan 01 ").append(minYear).append(" 00:00:00 GMT\",\n");
              sb.append("width:          \"70%\",\n");
              sb.append("intervalUnit:   Timeline.DateTime.MONTH,\n");
              sb.append("intervalPixels: 100\n");
        sb.append("}),\n");
        sb.append("Timeline.createBandInfo({\n");
        sb.append("eventSource:    eventSource,\n");
              sb.append("date:           \"Jan 01 ").append(minYear).append(" 00:00:00 GMT\",\n");
              sb.append("width:          \"30%\",\n");
              sb.append("intervalUnit:   Timeline.DateTime.YEAR,\n");
              sb.append("intervalPixels: 200\n");
        sb.append("})\n");
        sb.append("];\n");

        sb.append("bandInfos[1].syncWith = 0;\n");
        sb.append("bandInfos[1].highlight = true;\n");

        sb.append("tl = Timeline.create(document.getElementById(\"my-timeline\"), bandInfos);\n");
        int beginIndex = xmLocation.lastIndexOf("/")+1;
        sb.append("Timeline.loadXML(\"").append(xmLocation.substring(beginIndex)).append("\", function(xml, url) { eventSource.loadXML(xml, url); });\n");
      	sb.append("}\n");

      	sb.append("var resizeTimerID = null;\n");
      	sb.append("function onResize() {\n");
          sb.append("if (resizeTimerID == null) {\n");
              sb.append("resizeTimerID = window.setTimeout(function() {\n");
                  sb.append("resizeTimerID = null;\n");
                  sb.append("tl.layout();\n");
              sb.append("}, 500);\n");
          sb.append("}\n");
      	sb.append("}\n");

      	sb.append("</script>\n");

        sb.append("</head>\n");
        sb.append("<body onload=\"onLoad();\" onresize=\"onResize();\">\n");
        sb.append("<div id=\"my-timeline\" style=\"height: 150px; border: 1px solid #aaa\"></div>\n");

        sb.append("</body>\n");
        sb.append("</html>\n");

        try {
        	String inputUrl = htmLocation;
        	URL url = new URL(inputUrl);
        	HostConfiguration hostConfig = new HostConfiguration();
        	hostConfig.setHost(url.getHost(), url.getPort());
        	HttpClient httpClient = new HttpClient(new SimpleHttpConnectionManager());
        	httpClient.setHostConfiguration(hostConfig);
        	PutMethod putMethod = new PutMethod(inputUrl);
        	putMethod.setRequestEntity(
        			new ByteArrayRequestEntity(sb.toString().getBytes(), "text/plain"));
        	httpClient.executeMethod(putMethod);

        	inputUrl = xmLocation;
        	url = new URL(inputUrl);
        	hostConfig.setHost(url.getHost(), url.getPort());
        	httpClient.setHostConfiguration(hostConfig);
        	putMethod = new PutMethod(inputUrl);
        	putMethod.setRequestEntity(
        			new ByteArrayRequestEntity(buf.toString().getBytes(), "text/plain"));
        	httpClient.executeMethod(putMethod);
        }catch(Exception e) {
        	e.printStackTrace();
        }
    }

    /** This method gets called when a call with parameters is done to a given component
     * webUI fragment
     *
     * @param target The target path
     * @param request The request object
     * @param response The response object
     * @throws WebUIException A problem arose during the call back
     */
    public void handle(HttpServletRequest request, HttpServletResponse response) throws
            WebUIException {
        String sDone = request.getParameter("done");
        if ( sDone!=null ) {
            sem.release();
        }
        else
            emptyRequest(response);
    }

	/** When ready for execution.
    *
    * @param cc The component context
    * @throws ComponentExecutionException An exception occurred during execution
    * @throws ComponentContextException Illegal access to context
    */
    /* (non-Javadoc)
     * @see org.meandre.core.ExecutableComponent#execute(org.meandre.core.ComponentContext)
     */
    public void executeCallBack(ComponentContext cc)
    throws Exception {
    	minYear = Integer.MAX_VALUE;

    	htmLocation = cc.getProperty(DATA_PROPERTY_1);
    	xmLocation = cc.getProperty(DATA_PROPERTY_2);

    	Document doc = (Document)cc.getDataComponentFromInput(DATA_INPUT);
    	buf = new StringBuffer();
    	buf.append("<data>\n");
    	try {
			doc.getDocumentElement().normalize();
			docTitle = doc.getDocumentElement().getAttribute("docID");
			getConsoleOut().println("Root element : " + docTitle);
			NodeList nodeLst = doc.getElementsByTagName("date");
			getConsoleOut().println("Information of date");
			for (int k = 0; k < nodeLst.getLength(); k++) {
				Node fstNode = nodeLst.item(k);
				String aDate = fstNode.getTextContent();

				//standardize date
				//getConsoleOut().println("time : " + aDate);

				String month = null,
				       day   = null,
				       year  = null;

				String startMonth = null,
					   endMonth = null;

				Pattern datePattern = Pattern.compile("(january|jan|feburary|feb|march|mar|" + //look for month
						"april|apr|may|june|jun|july|jul|august|aug|september|sept|october|oct|"+
						"november|nov|december|dec)");
				Matcher dateMatcher = datePattern.matcher(aDate);
				if(dateMatcher.find()) { //look for month
					month = dateMatcher.group(1);
				} else { //look for season
					datePattern = Pattern.compile("(spring|summer|fall|winter)");
					dateMatcher = datePattern.matcher(aDate);
					if(dateMatcher.find()) {
						String season = dateMatcher.group(1);
						if(season.equalsIgnoreCase("spring")) {
							startMonth = "Apr 01";
							endMonth = "June 30";
						} else if(season.equalsIgnoreCase("summer")) {
							startMonth = "July 01";
							endMonth = "Sept 30";
						} else if(season.equalsIgnoreCase("fall")) {
							startMonth = "Oct 01";
							endMonth = "Dec 31";
						} else { //winter
							startMonth = "Jan 01";
							endMonth = "Mar 31";
						}
					}
				}

				datePattern = Pattern.compile("(\\b\\d{1}\\b)"); //look for day	like 5
				dateMatcher = datePattern.matcher(aDate);
				if(dateMatcher.find()) {
					day = dateMatcher.group(1);
				} else {
					datePattern = Pattern.compile("(\\b\\d{2}\\b)"); //look for day	like 21
					dateMatcher = datePattern.matcher(aDate);
					if(dateMatcher.find()) {
						day = dateMatcher.group(1);
					}
				}

				datePattern = Pattern.compile("(\\d{4})"); //look for year
				dateMatcher = datePattern.matcher(aDate);
				if(dateMatcher.find()) { //look for year
					NamedNodeMap nnp = fstNode.getAttributes();
		        	String sentence = nnp.getNamedItem("sentence").getNodeValue();

		        	//escape invalid xml characters
		        	sentence = sentence.replaceAll("[&]",  "&amp;");
		        	sentence = sentence.replaceAll("[<]",  "&lt;");
		        	sentence = sentence.replaceAll("[>]",  "&gt;");
		        	sentence = sentence.replaceAll("[\"]", "&quot; ");
		        	sentence = sentence.replaceAll("[\']", "&#39;");

		        	StringTokenizer st = new StringTokenizer(sentence, "|");
		        	StringBuffer sb = new StringBuffer();
		        	int nr = 0;
		        	while(st.hasMoreTokens()) {
		        		String nt = st.nextToken();
		        	    sb.append("&lt;div onclick=&#39;toggleVisibility(this)&#39; style=&#39;position:relative&#39; ALIGN=&#39;LEFT&#39;&gt;Sentence ").append(++nr);
		        	    sb.append("&lt;span style=&#39;display: none&#39; ALIGN=&#39;LEFT&#39;&gt; &lt;table bgcolor=&#39; yellow&#39; &gt;&lt;tr&gt;&lt;td&gt;").append(nt).append("&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/span&gt;&lt;/div&gt;");
		        	 }
		        	sentence = sb.toString();

					year = dateMatcher.group(1);
					minYear = Math.min(minYear, Integer.parseInt(year));
					//year or month year or month day year
					if(day == null)
						if(month == null) { //season year
							if(startMonth != null) {//spring or summer or fall or winter year
								buf.append("<event start=\"").append(startMonth + " " + year).append("\" end=\"").append(endMonth + " " + year).append("\" title=\"").append(/*year*/aDate).append("\">\n").append(sentence).append("\n");
								buf.append("</event>\n");
							} else { //year
								//if(Integer.parseInt(year) != 1832) {
								buf.append("<event start=\"").append(year).append("\" title=\"").append(/*year*/aDate).append("\">\n").append(sentence).append("\n");
								buf.append("</event>\n");//}
							}
						} else { //month year
							String startDay = month + " 01";
							int m = 1;
							if(month.startsWith("feb"))
								m = 2;
							else if(month.startsWith("mar"))
								m = 3;
							else if(month.startsWith("apr"))
								m = 4;
							else if(month.startsWith("may"))
								m = 5;
							else if(month.startsWith("jun"))
								m = 6;
							else if(month.startsWith("jul"))
								m = 7;
							else if(month.startsWith("aug"))
								m = 8;
							else if(month.startsWith("sept"))
								m = 9;
							else if(month.startsWith("oct"))
								m = 10;
							else if(month.startsWith("nov"))
								m = 11;
							else if(month.startsWith("dec"))
								m = 12;
							int y = Integer.parseInt(year);
							int numberOfDays = 31;
							if (m == 4 || m == 6 || m == 9 || m == 11)
							  numberOfDays = 30;
							else if (m == 2) {
								boolean isLeapYear = (y % 4 == 0 && y % 100 != 0 || (y % 400 == 0));
								if (isLeapYear)
									numberOfDays = 29;
								else
									numberOfDays = 28;
							}
							String endDay = month + " " + Integer.toString(numberOfDays);
							buf.append("<event start=\"").append(startDay + " " + year).append("\" end=\"").append(endDay + " " + year).append("\" title=\"").append(/*year*/aDate).append("\">\n").append(sentence).append("\n");
				    		buf.append("</event>\n");
						}
					else {
						if(month == null) {//year
							buf.append("<event start=\"").append(year).append("\" title=\"").append(/*year*/aDate).append("\">\n").append(sentence).append("\n");
							buf.append("</event>\n");
						} else { //month day month
							buf.append("<event start=\"").append(month + " " + day + " " + year).append("\" title=\"").append(/*month + " " + day + " " + year*/aDate).append("\">\n").append(sentence).append("\n");
							buf.append("</event>\n");
						}
					}
				}
			}
			buf.append("</data>");
    	} catch (Exception e1) {
			throw new ComponentExecutionException(e1);
		}

        upload();

    	try {
    		sInstanceID = cc.getExecutionInstanceID();
            sem.acquire();
            cc.startWebUIFragment(this);
            sem.acquire();
            cc.stopWebUIFragment(this);
        } catch (Exception e) {
            throw new ComponentExecutionException(e);
        }
    }

	/**
     * Call at the end of an execution flow.
     */
    public void initializeCallBack(ComponentContextProperties ccp)
    throws Exception {
    }

    /**
     * Called when a flow is started.
     */
    public void disposeCallBack(ComponentContextProperties ccp)
    throws Exception {
    }
}
